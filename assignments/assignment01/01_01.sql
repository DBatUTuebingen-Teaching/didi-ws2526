--------------------------------------------------------------------------------
-- Design and Implementation of Database Systems Internals
-- Assignment 01
-- Exercise 01
--------------------------------------------------------------------------------
-- In the lecture (slides DiDi-02.pdf), we have explored how DBMSs use
-- modern computer architectures to speed up query processing. In this exercise,
-- we will follow the path of the lecture and apply the concepts to a
-- simplified version of the TPC-H benchmark.
--
-- In the lecture, we have used the TPC-H table `lineitem` to illustrate how
-- a simple query "sum the quantity integer values in the 5th column" can be
-- implemented in awk, Python, C, and SQL.
--
-- Note: The 5th column only contains values ≥ 0.
--
-- In this exercise, we will do the same, but we will use the following
-- query: "Compute the maximum integer value in the 5th column — consider only
--         rows whose integer value in the first column larger than 1500000".
--
-- Please download the TPC-H table `lineitem` from the following URL:
-- https://db.cs.uni-tuebingen.de/staticfiles/lineitem.csv
--------------------------------------------------------------------------------
-- Task (a)
--------------------------------------------------------------------------------
-- Use awk to implement the query. See file #001 of the lecture for an
-- example of how to use awk to implement a query.
--
-- Hint: Define a variable `max` in BEGIN to store the maximum value.
-- You may initialize it with an empty string "", and then use the
-- following logic to update it:
-- (max > x) ? max : x
--------------------------------------------------------------------------------
-- Solution:
-- Please hand in a file query.awk that contains the solution.
--------------------------------------------------------------------------------
-- Task (b)
--------------------------------------------------------------------------------
-- Use Python to implement the query. See file #002 of the lecture for an
-- example of how to use Python to implement a query.
--------------------------------------------------------------------------------
-- Solution:
-- Please hand in a file query.py that contains the solution.
--------------------------------------------------------------------------------
-- Task (c)
--------------------------------------------------------------------------------
-- Use C to implement the query—do not use mmap, or threads, for now.
-- See file #003 of the lecture for an example.
--------------------------------------------------------------------------------
-- Solution:
-- Please hand in a file query.c that contains the solution.
--------------------------------------------------------------------------------
-- Task (d)
--------------------------------------------------------------------------------
-- Use C to implement the query—use mmap.
-- See file #004 of the lecture for an example.
-- Note: You can use the same code as in (c) and just add mmap.
--------------------------------------------------------------------------------
-- Solution:
-- Please hand in a file query_mmap.c that contains the solution.
--------------------------------------------------------------------------------
-- Task (e) — Advanced
--------------------------------------------------------------------------------
-- Based on your mmap implementation in (d), implement a version that uses
-- a self-implemented `my_atoi` function instead of the standard library `atoi`.
-- Hint: To implement `my_atoi`, you can use a while loop to iterate over
-- the characters of the string, and for each character, you can update
-- the integer value by multiplying the current value by 10 and adding
-- the integer value of the current character (i.e., `ch - '0'`).
--
-- Assume that the input is always valid (i.e., the string only contains digits and is non-empty).
-- Assume non-negative integers only.
-- You do not need to handle leading/trailing spaces, '+'/'-' signs, or overflow.
--------------------------------------------------------------------------------
-- Solution:
-- Please hand in a file query_mmap_my_atoi.c that contains the solution.
--------------------------------------------------------------------------------
-- Task (f)
--------------------------------------------------------------------------------
-- Use SQL to implement the query.
-- Hint: You will learn about the SQL dialect in the next lecture.
--------------------------------------------------------------------------------
-- Solution:

--------------------------------------------------------------------------------
-- Task (g)
--------------------------------------------------------------------------------
-- Please measure the execution time of your implementations in (a) to (f).
-- Use the following command to measure the execution time of your implementations:
--   time <your_command>
--
-- Does your custom `my_atoi` implementation in (e) perform better than
-- the standard library `atoi` implementation in (d)? Why (not)?
--------------------------------------------------------------------------------
-- Solution:

--------------------------------------------------------------------------------
